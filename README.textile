h1. Ag - issue tracking intertwined with Git

Ag is an issue tracker built on top of Git. Sound familiar? You bet. Here's the motivation for Ag:

Previously, I would have my code in a Git repository and my issues in a web-based issue tracking system. Put feature ideas and bug reports in the issue tracker, modify the code and resolve issues over time. From the issue tracker's point of view, issues are marked as resolved after some time, but there's no code or commits connected to it. Wouldn't it be useful to see which commits have been made to implement a feature or to resolve a bug?

Too bad it's laborious to link issues and commits this way - if there was such a connection, we would be able to tell not only who has changed the code and when, but we'd also be able to tell _why_ the code has been changed (and not by means of reading commit messages, but using properly categorized issues from the issue tracker). Commits could be easily (and automatically) categorized into _feature_ or _bug_, for example, or into various other aspects of the software project.

Here are some key points of Ag:

* *Issues are completely managed via Git.* Issues are plain text files which live in a branch separate from the project's source code. This means that as you code, all issues and related  information is right there beside you. And the entire issue history.

* Keeping *issues in a separate Git branch* doesn't spill issue-related information into your code  tree.

* *No more 'um... fixed this and that' commit messages.* When you work with issues, you have  already specified your intentions behind every issue, possibly aided by nested categories. When you tell Ag that you're starting to work on an issue, Ag creates a dedicated topic branch and it will automatically prepare the commit message to establsih the link between a commit and an issue. Feel free to add comments if your commit needs more explaining.

* *Nested categories.* Issues can be viewed from different perspectives. Typically, an issue is related to various aspects of technical, conceptual, or organizational levels. Such multi-perspective arrangements can be captured by Ag using nested categories (all categories are arranged in a tree). Issues can be linked to one or more categories.

* *Smart tab auto-completion* on the command line interface. 

h2. Installation

Yeah. Right now, installation is a bit awkward. An installation package would be nice! But until that, try the following:

Get the code first:

  $ git clone https://github.com/specht/ag.git
  $ cd ag

Install the Paint ruby gem:

  $ gem install paint
  -> you may have to make that a sudo gem install

Create symbolic links (from this directory):

  $ sudo ln -s ./ag /usr/local/bin/ag
  -> use any path you like as long as it's in your $PATH
  
  $ sudo ln -s ./include /usr/local/lib/site_ruby
  -> choose any path which is in Ruby's search path, try this: $ ruby -e 'puts $:'
  
To enable BASH auto-completion, add this line to your ~/.bashrc:

  complete -C /usr/local/bin/ag -o default ag
  -> Re-launch your shell or source ~/.bashrc
  
That should be it. Try 'ag help' to get started.

h2. Tutorial